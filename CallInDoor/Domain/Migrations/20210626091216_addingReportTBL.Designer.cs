// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210626091216_addingReportTBL")]
    partial class addingReportTBL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.AnswerTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Domain.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ChatNotificationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CultureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurentRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditableProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LimiteTimeOfRecieveRequest")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileConfirmType")
                        .HasColumnType("int");

                    b.Property<int>("RejectServiceCount")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StarCount")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Under3StarCount")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("VideoAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("WalletBalance")
                        .HasColumnType("float");

                    b.Property<int?>("verificationCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("verificationCodeExpireTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SerialNumber");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Entities.AreaTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfessional")
                        .HasColumnType("bit");

                    b.Property<string>("PersianTitle")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Domain.Entities.BaseMyServiceTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConfirmedServiceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabledByCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditableService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileOptional")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProfileConfirmType")
                        .HasColumnType("int");

                    b.Property<string>("ProfileRejectReson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarCount")
                        .HasColumnType("int");

                    b.Property<int?>("SubCatId")
                        .HasColumnType("int");

                    b.Property<int>("Under3StarCount")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceName");

                    b.HasIndex("ServiceType");

                    b.HasIndex("SubCatId");

                    b.HasIndex("ServiceName", "ServiceType");

                    b.ToTable("BaseMyService");
                });

            modelBuilder.Entity("Domain.Entities.BuyiedPackageTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyiedPackageStatus")
                        .HasColumnType("int");

                    b.Property<int>("BuyiedPackageType")
                        .HasColumnType("int");

                    b.Property<int?>("CheckDiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsRenewPackage")
                        .HasColumnType("bit");

                    b.Property<double?>("MainPrice")
                        .HasColumnType("float");

                    b.Property<int>("MessgaeCount")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("SitePercent")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CheckDiscountId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("BuyiedPackage");
                });

            modelBuilder.Entity("Domain.Entities.CardTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Domain.Entities.CategoryTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PersianTitle")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entities.ChatForLimitedServiceMessagesTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ChatMessageType")
                        .HasColumnType("int");

                    b.Property<int?>("ChatRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ClientUserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileOrVoiceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProviderSend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderUserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SenderUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SendetMesageType")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestTBLId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseServiceRequestId");

                    b.HasIndex("ChatRequestId");

                    b.HasIndex("ServiceRequestTBLId");

                    b.ToTable("ChatForLimitedServiceMessagesTBL");
                });

            modelBuilder.Entity("Domain.Entities.ChatServiceMessagesTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ChatMessageType")
                        .HasColumnType("int");

                    b.Property<int?>("ChatRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ClientUserName")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileOrVoiceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProviderSend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProviderUserName")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("SenderUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SendetMesageType")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestTBLId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseServiceRequestId");

                    b.HasIndex("ChatRequestId");

                    b.HasIndex("ServiceRequestTBLId");

                    b.ToTable("ChatServiceMessages");
                });

            modelBuilder.Entity("Domain.Entities.CheckDiscountTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DayCount")
                        .HasColumnType("int");

                    b.Property<string>("EnglishTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HourCount")
                        .HasColumnType("int");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<string>("PersianTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("CheckDiscount");
                });

            modelBuilder.Entity("Domain.Entities.CompanyServiceUserTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfirmStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("subSetUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("CompanyServiceUser");
                });

            modelBuilder.Entity("Domain.Entities.DiscountUsedByUserTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CheckDiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CheckDiscountId");

                    b.ToTable("DiscountUsedByUser");
                });

            modelBuilder.Entity("Domain.Entities.FieldTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DegreeType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("Domain.Entities.FirmProfileTBL", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodePosti")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FirmAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmCountry")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FirmDateOfRegistration")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("FirmLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmManagerName")
                        .HasColumnType("nvarchar(240)")
                        .HasMaxLength(240);

                    b.Property<string>("FirmName")
                        .HasColumnType("nvarchar(240)")
                        .HasMaxLength(240);

                    b.Property<string>("FirmNationalID")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FirmRegistrationID")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FirmState")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("AppUserId");

                    b.ToTable("FirmProfile");
                });

            modelBuilder.Entity("Domain.Entities.FirmServiceCategoryInterInterFaceTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirmProfileTBLId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ServiceTBLId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirmProfileTBLId");

                    b.HasIndex("ServiceTBLId");

                    b.ToTable("FirmServiceCategoryInterInterFace");
                });

            modelBuilder.Entity("Domain.Entities.MyChatServiceTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseId")
                        .HasColumnType("int");

                    b.Property<bool>("BeTranslate")
                        .HasColumnType("bit");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("FreeMessageCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsServiceReverse")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageCount")
                        .HasColumnType("int");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseId")
                        .IsUnique()
                        .HasFilter("[BaseId] IS NOT NULL");

                    b.ToTable("MyChatService");
                });

            modelBuilder.Entity("Domain.Entities.MyCourseServiceTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("DisCountPercent")
                        .HasColumnType("int");

                    b.Property<string>("NewCategory")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PreviewVideoAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalLenght")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId")
                        .IsUnique()
                        .HasFilter("[BaseId] IS NOT NULL");

                    b.ToTable("MyCourseService");
                });

            modelBuilder.Entity("Domain.Entities.MyCourseTopics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreeForEveryOne")
                        .HasColumnType("bit");

                    b.Property<int?>("MyCourseId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("MyCourseId");

                    b.ToTable("MyCourseTopics");
                });

            modelBuilder.Entity("Domain.Entities.MyServiceServiceTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseId")
                        .HasColumnType("int");

                    b.Property<bool>("BeTranslate")
                        .HasColumnType("bit");

                    b.Property<string>("DeliveryItems")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<bool>("FileNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("HowWorkConducts")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<string>("WorkDeliveryTimeEstimation")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BaseId")
                        .IsUnique()
                        .HasFilter("[BaseId] IS NOT NULL");

                    b.HasIndex("SpecialityId");

                    b.ToTable("MyServiceService");
                });

            modelBuilder.Entity("Domain.Entities.NotificationTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("int");

                    b.Property<string>("SenderUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextPersian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTBL");
                });

            modelBuilder.Entity("Domain.Entities.PaymentTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSucceed")
                        .HasColumnType("bit");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entities.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Domain.Entities.ProfileCertificateTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("ProfileConfirmType")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredCertificatesId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RequiredCertificatesId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ProfileCertificate");
                });

            modelBuilder.Entity("Domain.Entities.QuestionPullTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("QuestionPull");
                });

            modelBuilder.Entity("Domain.Entities.ReportTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseRequestServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseRequestServiceId");

                    b.ToTable("ReportTBL");
                });

            modelBuilder.Entity("Domain.Entities.Requests.BaseRequestServiceTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckDiscountId")
                        .HasColumnType("int");

                    b.Property<string>("ClienUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeTheMessageWasSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProvideUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceRequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WhenTheRequestShouldBeAnswered")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BaseServiceId");

                    b.HasIndex("CheckDiscountId");

                    b.ToTable("BaseServiceRequest");
                });

            modelBuilder.Entity("Domain.Entities.Requests.CallRequestTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BaseRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RealEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BaseRequestId")
                        .IsUnique()
                        .HasFilter("[BaseRequestId] IS NOT NULL");

                    b.ToTable("CallRequestTBL");
                });

            modelBuilder.Entity("Domain.Entities.Requests.ChatRequestTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllMessageCount_LimitedChat")
                        .HasColumnType("int");

                    b.Property<int?>("BaseRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyiedPackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireTime_LimitedChatVoice")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FreeMessageCount")
                        .HasColumnType("int");

                    b.Property<int?>("FreeUsageMessageCount")
                        .HasColumnType("int");

                    b.Property<bool>("HasPlan_LimitedChatVoice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedChat")
                        .HasColumnType("bit");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<double?>("PriceForNativeCustomer")
                        .HasColumnType("float");

                    b.Property<double?>("PriceForNonNativeCustomer")
                        .HasColumnType("float");

                    b.Property<int>("UsedMessageCount_LimitedChat")
                        .HasColumnType("int");

                    b.Property<DateTime>("WhenTheRequestShouldBeAnswered")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BaseRequestId")
                        .IsUnique()
                        .HasFilter("[BaseRequestId] IS NOT NULL");

                    b.HasIndex("BuyiedPackageId");

                    b.ToTable("ChatRequest");
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Permission");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCommentsTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseMyServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResonForUnder3Star")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<int>("StarCount")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("BaseMyServiceId");

                    b.ToTable("ServiceComments");
                });

            modelBuilder.Entity("Domain.Entities.ServiceRequestTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllMessageCount_LimitedChat")
                        .HasColumnType("int");

                    b.Property<int?>("BaseServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyiedPackageId")
                        .HasColumnType("int");

                    b.Property<string>("ClienUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireTime_LimitedChatVoice")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FreeMessageCount")
                        .HasColumnType("int");

                    b.Property<int?>("FreeUsageMessageCount")
                        .HasColumnType("int");

                    b.Property<bool>("HasPlan_LimitedChatVoice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedChat")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastTimeTheMessageWasSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<double?>("PriceForNativeCustomer")
                        .HasColumnType("float");

                    b.Property<double?>("PriceForNonNativeCustomer")
                        .HasColumnType("float");

                    b.Property<string>("ProvideUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceRequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedMessageCount_LimitedChat")
                        .HasColumnType("int");

                    b.Property<DateTime>("WhenTheRequestShouldBeAnswered")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BaseServiceId");

                    b.HasIndex("BuyiedPackageId");

                    b.ToTable("ServiceRequest");
                });

            modelBuilder.Entity("Domain.Entities.ServiceSurveyTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceSurvey");
                });

            modelBuilder.Entity("Domain.Entities.ServiceTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AcceptedMinPrice")
                        .HasColumnType("float");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileOptional")
                        .HasColumnType("bit");

                    b.Property<double>("MinSessionTime")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SitePercent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Entities.ServiceTagsTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnglisTags")
                        .HasColumnType("bit");

                    b.Property<string>("PersianTagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceTags");
                });

            modelBuilder.Entity("Domain.Entities.ServidceTypeRequiredCertificatesTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PersianFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServidceTypeRequiredCertificates");
                });

            modelBuilder.Entity("Domain.Entities.SpecialityTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreatId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreatId");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("popularity")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Domain.Entities.TiketMessagesTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TiketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TiketId");

                    b.ToTable("TiketMessages");
                });

            modelBuilder.Entity("Domain.Entities.TiketTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdminLastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdminSendNewMessgae")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserSendNewMessgae")
                        .HasColumnType("bit");

                    b.Property<int>("PriorityStatus")
                        .HasColumnType("int");

                    b.Property<int>("TiketStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserLastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tiket");
                });

            modelBuilder.Entity("Domain.Entities.TopTenPackageTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayCount")
                        .HasColumnType("int");

                    b.Property<int?>("HourCount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("TopTenPackage");
                });

            modelBuilder.Entity("Domain.Entities.TransactionTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Amount")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("BaseMyServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckDiscountId")
                        .HasColumnType("int");

                    b.Property<string>("ClientUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeWithDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionConfirmedStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int?>("User_TopTenPackageId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseMyServiceId");

                    b.HasIndex("CardId");

                    b.HasIndex("CheckDiscountId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("User_TopTenPackageId")
                        .IsUnique()
                        .HasFilter("[User_TopTenPackageId] IS NOT NULL");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Domain.Entities.UserWithdrawlRequestTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CardItId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RejectOrConfirmTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResonOfReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WithdrawlRequestStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardItId");

                    b.ToTable("UserWithdrawlRequest");
                });

            modelBuilder.Entity("Domain.Entities.User_TopTenPackageTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("TopTenPackageId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TopTenPackageId");

                    b.ToTable("User-TopTenPackage");
                });

            modelBuilder.Entity("Helper.Models.Entities.SettingTBL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.AnswerTBL", b =>
                {
                    b.HasOne("Domain.Entities.QuestionPullTBL", "QuestionPullTBL")
                        .WithMany("AnswersTBLs")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Domain.Entities.AreaTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.BaseMyServiceTBL", b =>
                {
                    b.HasOne("Domain.Entities.CategoryTBL", "CategoryTBL")
                        .WithMany()
                        .HasForeignKey("CatId");

                    b.HasOne("Domain.Entities.AppUser", "Company")
                        .WithMany("BaseMyServiceTBLs")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.ServiceTBL", "ServiceTbl")
                        .WithMany("BaseMyServices")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Domain.Entities.CategoryTBL", "SubCategoryTBL")
                        .WithMany()
                        .HasForeignKey("SubCatId");
                });

            modelBuilder.Entity("Domain.Entities.BuyiedPackageTBL", b =>
                {
                    b.HasOne("Domain.Entities.CheckDiscountTBL", "CheckDiscountTBL")
                        .WithMany("BuyiedPackageTBLs")
                        .HasForeignKey("CheckDiscountId");

                    b.HasOne("Domain.Entities.ServiceRequestTBL", "ServiceRequestTBL")
                        .WithMany()
                        .HasForeignKey("ServiceRequestId");
                });

            modelBuilder.Entity("Domain.Entities.CategoryTBL", b =>
                {
                    b.HasOne("Domain.Entities.CategoryTBL", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany("Categories")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.ChatForLimitedServiceMessagesTBL", b =>
                {
                    b.HasOne("Domain.Entities.Requests.BaseRequestServiceTBL", "BaseRequestServiceTBL")
                        .WithMany("ChatForLimitedServiceMessagesTBL")
                        .HasForeignKey("BaseServiceRequestId");

                    b.HasOne("Domain.Entities.Requests.ChatRequestTBL", "ChatRequestTBL")
                        .WithMany("ChatForLimitedServiceMessagesTBL")
                        .HasForeignKey("ChatRequestId");

                    b.HasOne("Domain.Entities.ServiceRequestTBL", null)
                        .WithMany("ChatForLimitedServiceMessagesTBL")
                        .HasForeignKey("ServiceRequestTBLId");
                });

            modelBuilder.Entity("Domain.Entities.ChatServiceMessagesTBL", b =>
                {
                    b.HasOne("Domain.Entities.Requests.BaseRequestServiceTBL", "BaseRequestServiceTBL")
                        .WithMany("ChatServiceMessagesTBL")
                        .HasForeignKey("BaseServiceRequestId");

                    b.HasOne("Domain.Entities.Requests.ChatRequestTBL", "ChatRequestTBL")
                        .WithMany("ChatServiceMessagesTBL")
                        .HasForeignKey("ChatRequestId");

                    b.HasOne("Domain.Entities.ServiceRequestTBL", null)
                        .WithMany("ChatServiceMessagesTBL")
                        .HasForeignKey("ServiceRequestTBLId");
                });

            modelBuilder.Entity("Domain.Entities.CheckDiscountTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.CompanyServiceUserTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "ServiceTBL")
                        .WithMany("CompanyServiceUserTBLs")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.DiscountUsedByUserTBL", b =>
                {
                    b.HasOne("Domain.Entities.CheckDiscountTBL", "CheckDiscountTBL")
                        .WithMany("DiscountUsedByUserTBL")
                        .HasForeignKey("CheckDiscountId");
                });

            modelBuilder.Entity("Domain.Entities.FieldTBL", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("Fields")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.FirmProfileTBL", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "AppUser")
                        .WithOne("FirmProfile")
                        .HasForeignKey("Domain.Entities.FirmProfileTBL", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.FirmServiceCategoryInterInterFaceTBL", b =>
                {
                    b.HasOne("Domain.Entities.FirmProfileTBL", "FirmProfileTBL")
                        .WithMany("FirmServiceCategoryTBLs")
                        .HasForeignKey("FirmProfileTBLId");

                    b.HasOne("Domain.Entities.ServiceTBL", "ServiceTBL")
                        .WithMany("FirmServiceCategoryTBLs")
                        .HasForeignKey("ServiceTBLId");
                });

            modelBuilder.Entity("Domain.Entities.MyChatServiceTBL", b =>
                {
                    b.HasOne("Domain.Entities.BaseMyServiceTBL", "BaseMyChatTBL")
                        .WithOne("MyChatsService")
                        .HasForeignKey("Domain.Entities.MyChatServiceTBL", "BaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.MyCourseServiceTBL", b =>
                {
                    b.HasOne("Domain.Entities.BaseMyServiceTBL", "BaseMyChatTBL")
                        .WithOne("MyCourseService")
                        .HasForeignKey("Domain.Entities.MyCourseServiceTBL", "BaseId");
                });

            modelBuilder.Entity("Domain.Entities.MyCourseTopics", b =>
                {
                    b.HasOne("Domain.Entities.MyCourseServiceTBL", "MyCourseServiceTBL")
                        .WithMany("TopicsTBLs")
                        .HasForeignKey("MyCourseId");
                });

            modelBuilder.Entity("Domain.Entities.MyServiceServiceTBL", b =>
                {
                    b.HasOne("Domain.Entities.AreaTBL", "AreaTBL")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("Domain.Entities.BaseMyServiceTBL", "BaseMyChatTBL")
                        .WithOne("MyServicesService")
                        .HasForeignKey("Domain.Entities.MyServiceServiceTBL", "BaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.SpecialityTBL", "SpecialityTBL")
                        .WithMany()
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("Domain.Entities.PaymentTBL", b =>
                {
                    b.HasOne("Domain.Entities.TransactionTBL", "TransactionTBL")
                        .WithMany()
                        .HasForeignKey("TransactionId");
                });

            modelBuilder.Entity("Domain.Entities.ProfileCertificateTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServidceTypeRequiredCertificatesTBL", "ServidceTypeRequiredCertificatesTBL")
                        .WithMany()
                        .HasForeignKey("RequiredCertificatesId");

                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.QuestionPullTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.ReportTBL", b =>
                {
                    b.HasOne("Domain.Entities.Requests.BaseRequestServiceTBL", "BaseRequestServiceTBL")
                        .WithMany()
                        .HasForeignKey("BaseRequestServiceId");
                });

            modelBuilder.Entity("Domain.Entities.Requests.BaseRequestServiceTBL", b =>
                {
                    b.HasOne("Domain.Entities.BaseMyServiceTBL", "BaseMyServiceTBL")
                        .WithMany()
                        .HasForeignKey("BaseServiceId");

                    b.HasOne("Domain.Entities.CheckDiscountTBL", "CheckDiscountTBL")
                        .WithMany("BaseRequestServiceTBLs")
                        .HasForeignKey("CheckDiscountId");
                });

            modelBuilder.Entity("Domain.Entities.Requests.CallRequestTBL", b =>
                {
                    b.HasOne("Domain.Entities.Requests.BaseRequestServiceTBL", "BaseRequestServiceTBL")
                        .WithOne("CallRequestTBL")
                        .HasForeignKey("Domain.Entities.Requests.CallRequestTBL", "BaseRequestId");
                });

            modelBuilder.Entity("Domain.Entities.Requests.ChatRequestTBL", b =>
                {
                    b.HasOne("Domain.Entities.Requests.BaseRequestServiceTBL", "BaseRequestServiceTBL")
                        .WithOne("ChatRequestTBL")
                        .HasForeignKey("Domain.Entities.Requests.ChatRequestTBL", "BaseRequestId");

                    b.HasOne("Domain.Entities.BuyiedPackageTBL", "BuyiedPackageTBL")
                        .WithMany()
                        .HasForeignKey("BuyiedPackageId");
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.HasOne("Domain.Entities.Permissions", "Permissions")
                        .WithMany("Role_Permissions")
                        .HasForeignKey("PermissionId");

                    b.HasOne("Domain.Entities.AppRole", "AppRole")
                        .WithMany("Role_Permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCommentsTBL", b =>
                {
                    b.HasOne("Domain.Entities.BaseMyServiceTBL", "BaseMyService")
                        .WithMany("ServiceCommentsTBLs")
                        .HasForeignKey("BaseMyServiceId");
                });

            modelBuilder.Entity("Domain.Entities.ServiceRequestTBL", b =>
                {
                    b.HasOne("Domain.Entities.BaseMyServiceTBL", "BaseMyServiceTBL")
                        .WithMany("ServiceRequestTBLs")
                        .HasForeignKey("BaseServiceId");

                    b.HasOne("Domain.Entities.BuyiedPackageTBL", "BuyiedPackageTBL")
                        .WithMany()
                        .HasForeignKey("BuyiedPackageId");
                });

            modelBuilder.Entity("Domain.Entities.ServiceSurveyTBL", b =>
                {
                    b.HasOne("Domain.Entities.AnswerTBL", "AnswerTBL")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("Domain.Entities.QuestionPullTBL", "QuestionTBL")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.ServiceTBL", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", "AppRole")
                        .WithMany("Services")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Domain.Entities.ServiceTagsTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany("Tags")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.ServidceTypeRequiredCertificatesTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "Service")
                        .WithMany("ServidceTypeRequiredCertificatesTBL")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.SpecialityTBL", b =>
                {
                    b.HasOne("Domain.Entities.AreaTBL", "Area")
                        .WithMany("Specialities")
                        .HasForeignKey("AreatId");
                });

            modelBuilder.Entity("Domain.Entities.TiketMessagesTBL", b =>
                {
                    b.HasOne("Domain.Entities.TiketTBL", "TiketTBL")
                        .WithMany("TiketMessagesTBL")
                        .HasForeignKey("TiketId");
                });

            modelBuilder.Entity("Domain.Entities.TopTenPackageTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "ServiceTbl")
                        .WithMany("TopTenPackageTBL")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Domain.Entities.TransactionTBL", b =>
                {
                    b.HasOne("Domain.Entities.BaseMyServiceTBL", "BaseMyServiceTBL")
                        .WithMany()
                        .HasForeignKey("BaseMyServiceId");

                    b.HasOne("Domain.Entities.CardTBL", "CardTBL")
                        .WithMany("TransactionTBLs")
                        .HasForeignKey("CardId");

                    b.HasOne("Domain.Entities.CheckDiscountTBL", "CheckDiscountTBL")
                        .WithMany("Transactions")
                        .HasForeignKey("CheckDiscountId");

                    b.HasOne("Domain.Entities.PaymentTBL", "PaymentTBL")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("Domain.Entities.User_TopTenPackageTBL", "User_TopTenPackageTBL")
                        .WithOne("TransactionTBL")
                        .HasForeignKey("Domain.Entities.TransactionTBL", "User_TopTenPackageId");
                });

            modelBuilder.Entity("Domain.Entities.UserWithdrawlRequestTBL", b =>
                {
                    b.HasOne("Domain.Entities.CardTBL", "CardTBL")
                        .WithMany()
                        .HasForeignKey("CardItId");
                });

            modelBuilder.Entity("Domain.Entities.User_TopTenPackageTBL", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTBL", "ServiceTbl")
                        .WithMany("User_TopTenPackageTBL")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Domain.Entities.TopTenPackageTBL", "TopTenPackageTBL")
                        .WithMany()
                        .HasForeignKey("TopTenPackageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", null)
                        .WithMany("UserRolesTBL")
                        .HasForeignKey("AppRoleId");

                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany("UserRolesTBL")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
